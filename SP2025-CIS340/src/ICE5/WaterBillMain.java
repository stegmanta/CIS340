package ICE5;

/* ICE5 Generated by: Dr. Abdunabi
 * Using Abstracted classes and Interfaces 
 */
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

import javax.swing.JOptionPane;
import javax.swing.JTextArea;

public class WaterBillMain {

	// class variables
	static Customer[] customers;
	static String output = "Water Bill\n" + "name\t" + "number\t" + "Gallons\t" + "Value\t" +
            "Status\t" + "Date"; 
	
	public static void main(String[] args) throws FileNotFoundException {

		// declare variables and constants
		    int gallons = 0, custNumber = 0, custType = 0, noOfCustomers=0, fileSize = 0;
			String custName = "";
		
		// Enter number of customers - Use the Validation Methods in class DataEntries
				noOfCustomers = DataEntries.intInput("Input No of Customers");
					
				
				  
				  // 1- Call the getFileLength() method to get the number of lines in the data input file, "inputWaterBill.txt"
				 //  2- Create customers array with size of noOfCustomers
				 fileSize = getFileLength("inputWaterBill.txt");
				 customers = new Customer[fileSize + noOfCustomers];
				
				// read data from the input data file before reading the data from the users 
				readFromFile("inputWaterBill.txt");
				
				// start looping to read customer information and compute water bills 		
				for (int i = 0; i<noOfCustomers; i++) {
				
				//input customer rate - Use the Validation Methods in class DataEntries
				custType = DataEntries.intInputChoice(1, 2, "Input Customer Type:" +
								  "\n1 - Single Family Bill" + "\n2 - Duplex Bill");
						
				// To complete
				// Input Customer Number - Use the Validation Methods in class DataEntries
				// Double check if the customer number does exist, and allow the user to try again
				while(true) {
					custNumber = DataEntries.intInputSize(6, "Input Customer Number");
					int index = binarySearch(custNumber);
					if(index < 0) {
						JOptionPane.showMessageDialog(null, "SUCCESS: Customer " + custNumber + "\nAdded to database");
						break;
					}else {
						JOptionPane.showMessageDialog(null, "FAIL: Customer: " + custNumber + "\t" +  customers[index].toString() + "already in database, try again");
					}	
						
				}
								
				
				// Enter customer name - Use the Validation Methods in class DataEntries
				custName = DataEntries.strInput("Input Customer Name");
								    
							   
				// Enter number of gallons - Use the Validation Methods in class DataEntries
				gallons = DataEntries.intInput("Input Number of Gallons");
				
				
				// call the addCustomer() method to create a Customer object and add it to the customers array
				addCustomer(custName,custNumber,gallons,custType);
		      
				}// end for
				
				
				// Display array output
				updateArrayOutput();
				displayBill();
				
				// Find out the customer with min, max, and average bill values
				minValue(); maxValue(); avgValue();
				
				// display the output
				displayBill();
				
				output+= "\n" + "After Sorting Customer Bills:";
				//Sort customers array
				sortBill();
				
		     
				// Display output
				updateArrayOutput();
				displayBill();
				
				// To Complete
				// Search for a customer in array by number
				int number = DataEntries.intInputSize(6, "Input Customer Number To Serach");
				// Add the code that calls binarySearch(number), to search for the customer number
					
		        
				// store output to a file		
				writeToFile();
					
	}// end main
		
	private static void addCustomer(String custName, int custNumber, int gallons, int custType) {
		
			if (custType == 1)
		       customers[Customer.getNoOfCustomers()] = new Customer(custName,custNumber,
				  new SingleFamily(gallons));
		    else 
			  customers[Customer.getNoOfCustomers()] = new Customer(custName,custNumber,
					   new Duplex(gallons));
	}// end method
	
	
	    // Update the program output with array objects
	    public static void updateArrayOutput() {

	    	for (int i = 0; i < Customer.getNoOfCustomers();i++) {
	    		output+= "\n" + customers[i].toString();
	    	}
	    }// 

		// display program output
		public static void displayBill() {
		  
		  // display the output		  
		  JOptionPane.showMessageDialog(null, new JTextArea(output));
	
		}// end displayBill 
				
					
		public static void  sortBill() {
			
			for (int i = 0; i < Customer.getNoOfCustomers() - 1; i++) {
			      // Find the minimum in the list[i..list.length-1]
			      Customer currentMin = customers[i];
			      int currentMinIndex = i;

			      for (int j = i + 1; j < Customer.getNoOfCustomers(); j++) {
			        			    	  
			     // To Complete
			     // Update the if-statement to use the compareTo() method in the Customer class
			    if (currentMin.compareTo(customers[j]) > 0) {
			    	  currentMin = customers[j];
			          currentMinIndex = j;
			        }
			      }// end for j
	      		      
			      // Swap list[i] with list[currentMinIndex] if necessary;
			      if (currentMinIndex != i) {
			    	  customers[currentMinIndex] = customers[i];
			    	  customers[i] = currentMin;
			         
			      }
			    }// end for i

			  JOptionPane.showMessageDialog(null, "Done Sorting Customer Data By Bill Values");
		}// end sortBill
		
	static void writeToFile() {
		
		// File
		File file = new File("bills.txt");
	    
			    // Create a file
	    PrintWriter write = null;
		try {
			write = new PrintWriter(file);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		String out = "Water Bill\n" + "name\t" + "number\t" + "Gallons\t" + "Value\t" +
                "Satatus\t" + "Date";
       for (int i =0; i < customers.length; i++)
	           out+= "\n" + customers[i].toString();
		
	    // Write formatted output to the file
	    write.print(out);
	   

	    // Close the file
	    write.close();
	    
	    JOptionPane.showMessageDialog(null, "Done Storing Customer Data into a File");

	}// end writeToFile
	
	// reads the number of lines in the input data file - returns int value
			public static int getFileLength(String fileName) throws FileNotFoundException {
				   
			    // read data from inputWaterBill, (see week 03 - Text I/O files)
				// Create a File instance
			    File file = new File(fileName);
			
			    // Create a Scanner for the file
			    Scanner sc = new Scanner(file);

			    			    
			   // Start reading data from file using while loop
			    int i = 0;
			    while (sc.hasNext()) {
			    	// Read the file data line by line, then count the number of lines using i
			    	sc.nextLine();
			    	i++;
			   }// end while
				
				
				// Close the file
			    sc.close();
			    
			    	    
			    // display message the program done reading data
			    JOptionPane.showMessageDialog(null, "Completed Reading Number of Lines IN File: " + fileName);
			     
			    // return the number of lines in the data input file  
			    return i;
			  
			}// end read the file length method
			
	static void readFromFile(String fileName) throws FileNotFoundException {
		
		// create file object
		File file = new File(fileName);
		
		// create scanner object
		Scanner sc = new Scanner(file);
		
		// Change the scanner delimiter
		sc.useDelimiter(",|\r\n");
		
		while (sc.hasNext()) {
			
			String custName = sc.next().trim();
			int custType = Integer.parseInt(sc.next().trim());
			int custNumber = Integer.parseInt(sc.next().trim());
			int gallons = Integer.parseInt(sc.next().trim());
			
			// To complete
			// call binarySearch To check the customer number does not exist, in order to add the customer to the array
			// Do not add the new customer object if the custNumber does exist 
			custNumber = DataEntries.intInputSize(6, "Input Customer Number");
			int index = binarySearch(custNumber);
			if(index < 0) {
				JOptionPane.showMessageDialog(null, "SUCCESS: Customer " + custNumber + "\nAdded to database");
				addCustomer(custName, custNumber, gallons, custType);
			}else {
				JOptionPane.showMessageDialog(null, "FAIL: Customer " + custNumber + "\t" +  customers[index].toString() + "\nAlready in database, try again");
			}
			
		}// end while
		
		sc.close();
		
		JOptionPane.showMessageDialog(null,"Done Reading from file!");
	}// end readFromFile
	
	static void minValue() {
		double min = customers[0].getBill().getValue();
		int index = 0;
		
		for (int i = 1; i< customers.length; i++)
			if (min > customers[i].getBill().getValue()) {
				min = customers[i].getBill().getValue();
				index = i;
			}// end for
		
		output+= "\n The Min Water Bill Customer: " + customers[index].toString();
		
	}// end minIndex()
	
	static void maxValue() {
		double max = customers[0].getBill().getValue();
		int index = 0;
		
		for (int i = 1; i< customers.length; i++)
			if (max < customers[i].getBill().getValue()) {
				max = customers[i].getBill().getValue();
				index = i;
			}// end for
				
		output+= "\n The Max Water Bill Customer: " + customers[index].toString();
	}// maxIndex()
	
	static void avgValue() {
		
		double sum =0;
		for (int i = 0; i< customers.length; i++)
			sum+=customers[i].getBill().getValue();
		
		output+= "\n Avg Water Bill Values: " + String.format("%.2f",sum/customers.length);
			
	}// end avg()
	
	// To complete this method in class
	// Use the binary-search to search in the customers array by customer number - key, the array is not completely filled out with data yet, 
	// based on Customer number
	static int binarySearch(int key) {
		
		// Array of customers must be sorted by customer numbers first 
		sortArrayByNumber();
	    
		// use the code from the binary search example
		// Search by the Customer objects by customer number as the key
		int index = -1;
		// add the reaming code here
		int low = 0;
	    int high = Customer.getNoOfCustomers() - 1;

	    while (high >= low) {

	      int mid = (low + high) / 2;

	      if (key < customers[mid].getNumber())
	        high = mid - 1;
	      else if (key == customers[mid].getNumber()) {
	        index =  mid;
	        break;
	      }
	      else
	        low = mid + 1;
	    }

	     if (index == -1)
	            index =  -low - 1; // Now high < low
	    
		JOptionPane.showMessageDialog(null, "Done Searching In Customer Data Based on Customer's Number!");
		
		 if (index == -1)
	            ; // Now high < low: update index with the insertion point with a negative value
		 
		return index;
		
	}// end binarySearch()

	// To complete this method in class
	// Use the selection sort to sort the current elements in the customers array, the array is not completely filled out yet, 
	// based on Customer number 
	static void sortArrayByNumber() {
								
		for (int i = 0; i < Customer.getNoOfCustomers() - 1; i++) {
		      // Find the minimum in the list[i..list.length-1]
		      Customer currentMin = customers[i];
		      int currentMinIndex = i;

		      for (int j = i + 1; j < Customer.getNoOfCustomers(); j++) {
		        			    	  
		    	  // To Complete
		    	  // Update the if-statement to use the Customer customers by customer numbers
		    	  // call compareToByID() in the Customer class
		    	  if (currentMin.compareToByID(customers[j]) > 0) {
		    		  currentMin = customers[j];
		              currentMinIndex = j;
		        }
		      }// end for j

		   		      		      
		      // Swap list[i] with list[currentMinIndex] if necessary;
		      if (currentMinIndex != i) {
		    	  customers[currentMinIndex] = customers[i];
		    	  customers[i] = currentMin;
		         
		      }
		    }// end for i

		
		JOptionPane.showMessageDialog(null, "Done Sorting Customer Data Based on Customer's Number!");
		
		
	}// end sortArrayByNumber()
		
}// end class
